---
import { getI18NProducts, getValueFromKey } from "@/i18n";
import { cn, data } from "@/shared/utils";
import { InteractiveGridPattern } from "../react/InteractiveGridPattern";

const { currentLocale } = Astro;
const i18n = getI18NProducts({ currentLocale });

const t = (key: string) => getValueFromKey(key, i18n);

const apiKey = import.meta.env.GOOGLE_SHEET_APIKEY;
const spreadsheetId = import.meta.env.GOOGLE_SHEET_ID;

const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/main?key=${apiKey}`;

let parsedLista: {
  code: string;
  name: string;
  price: string;
  show: boolean;
}[] = [];

if (apiKey && spreadsheetId) {
  console.log("Fetching data...");
  await fetch(url)
    .then((response) => response.json())
    .then((data) => {
      for (const row of data.values) {
        if (data.values.indexOf(row) === 0) continue;
        parsedLista.push({
          code: row[0],
          name: row[1],
          price: row[2],
          show: row[3] === "1",
        });
      }
    });
}

const withData = parsedLista.map(({ code, name, price, show }) => {
  const categorySelected = data.products.filter((category) => {
    return category.children.find((child) =>
      child.variants.find((variant) => variant.catalogId?.includes(code))
    );
  })[0];

  const category = t(categorySelected?.name || "");
  const categoryDescription = t(categorySelected?.description || "");
  const categoryShortDescription = t(categorySelected?.shortDescription || "");

  const childSelected = categorySelected?.children.find((child) =>
    child.variants.find((variant) => variant.catalogId?.includes(code))
  );

  const variantSelected = childSelected?.variants.find((variant) =>
    variant.catalogId?.includes(code)
  );

  const originalName = t(childSelected?.name || "");
  const review = t(childSelected?.info?.review || "");
  const specs = t(childSelected?.info?.specs || "");
  const included = t(childSelected?.info?.included || "");

  return {
    code,
    name,
    price,
    show,
    category,
    categoryDescription,
    categoryShortDescription,
    registered: childSelected?.id !== undefined,
    originalName,
    info: {
      review,
      included,
      specs,
    },
    photo: variantSelected?.photos,
  };
});

type WithData = {
  code: string;
  name: string;
  price: string;
  show: boolean;
  category: any;
  categoryDescription: any;
  categoryShortDescription: any;
  registered: boolean;
  originalName: any;
  info: {
    review: any;
    included: any;
    specs: any;
  };
  photo: string[] | undefined;
}[];

type AgrupadoPorCategoriaHijo = {
  products: WithData;
  categoryName: string;
  categoryDescription: string;
  categoryShortDescription: string;
};

type AgrupadoPorCategoria = {
  [categoria: string]: AgrupadoPorCategoriaHijo;
};

function group(withData: WithData): AgrupadoPorCategoria {
  return withData.reduce((acumulador: AgrupadoPorCategoria, item) => {
    const categoria = item.category || "Sin categoría";
    if (!acumulador[categoria]) {
      acumulador[categoria] = {
        products: [],
        categoryName: item.category || "Sin categoría",
        categoryDescription: item.categoryDescription || "Sin descripción",
        categoryShortDescription:
          item.categoryShortDescription || "Sin subtitulo",
      };
    }
    acumulador[categoria].products.push(item);
    return acumulador;
  }, {});
}

const groupedByCategory = group(withData);
---

<div class="flex">
  <InteractiveGridPattern
    client:only
    className={cn(
      "[mask-image:radial-gradient(400px_circle_at_center,white,transparent)] -mt-40"
    )}
    width={20}
    height={20}
    squares={[80, 80]}
    squaresClassName="hover:fill-interbrasGreen-500"
  />

  <div class="flex-1 justify-center items-end pr-20 flex-col hidden lg:flex">
    <img
      id="fade"
      src="/1.png"
      alt="recopilacion de productos"
      class="h-[500px] object-contain -rotate-12 scale-90"
    />
  </div>
  <div
    class="flex justify-center items-center flex-col h-[500px] my-9 gap-5 pointer-events-none relative z-20 mx-auto"
  >
    <div class="flex flex-col items-center gap-4 mx-auto">
      <h1 class="text-5xl font-bold text-center">Catalogo de Productos</h1>

      <h2 class="text-xl text-center">
        Encuentra los mejores productos para tu hogar
      </h2>
    </div>

    <button
      class="bg-interbrasGreen-500 hover:bg-interbrasGreen-600 text-white px-5 py-2 rounded-xl text-xl flex gap-3 pointer-events-auto"
      id="downloadCatalog"
    >
      Descargar catalogo
      <svg
        class="w-auto h-6 my-auto fill-white"
        clip-rule="evenodd"
        fill-rule="evenodd"
        stroke-linejoin="round"
        stroke-miterlimit="2"
        viewBox="0 0 267 267"
        xmlns="http://www.w3.org/2000/svg"
        id="fi_12262500"
        ><g transform="matrix(4.167 0 0 4.167 -666.667 0)"
          ><path
            d="m213 53h-42v-8c0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1v10.492c0 3.042 2.466 5.508 5.508 5.508h46.984c3.042 0 5.508-2.466 5.508-5.508 0-4.418 0-10.492 0-10.492 0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1zm-28-27h-13c-.4 0-.762.238-.919.606-.158.368-.081.794.195 1.084l20 21c.189.198.45.31.724.31s.535-.112.724-.31l20-21c.276-.29.353-.716.195-1.084-.157-.368-.519-.606-.919-.606h-13v-22c0-.552-.448-1-1-1h-12c-.552 0-1 .448-1 1z"
          ></path></g
        ></svg
      >
    </button>
  </div>

  <div class="flex-1 justify-center items-start pr-20 flex-col hidden lg:flex">
    <img
      id="fade"
      src="/2.png"
      alt="recopilacion de productos"
      class="h-[500px] object-contain rotate-12 scale-90"
    />
  </div>
</div>

<div id="catalogScroll" class="mx-auto overflow-auto w-screen h-0 xl:h-auto">
  <div id="catalog" class="flex flex-col gap-8 w-[1360px] mx-auto">
    {
      Object.keys(groupedByCategory).map((category) => {
        const { categoryName, products, categoryDescription } =
          groupedByCategory[category];
        return (
          <section
            id="catalogSection"
            class=" flex bg-interbrasGreen-500 text-white rounded-[50px] "
          >
            <div class="mx-8 my-16 flex flex-col">
              <h2 class="text-4xl font-bold">{categoryName}</h2>
              <h2 class="text-xl mt-2 max-w-80 leading-6">
                {categoryDescription}
              </h2>
              <h3 class="text-base max-w-80 mt-3 leading-5 text-white/70">
                {products[0].info.review}
              </h3>

              {products[0].registered && (
                <div class=" w-full relative mt-10 bg-interbrasGreen-600 rounded-xl  py-10">
                  <img
                    class=" max-w-72 w-full rounded-3xl object-contain relative mx-auto z-10"
                    src={products[0].photo?.[0]}
                    alt=""
                  />
                  <div class=" absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2  size-56 rounded-full  bg-interbrasGreen-300 " />
                  <h3 class=" max-w-44 text-center mx-auto font-bold text-xl mt-3">
                    {products[0].originalName}
                  </h3>
                </div>
              )}
            </div>
            <ul
              class={`
              flex-1 bg-white text-black m-4 rounded-t-[50px] rounded-b-3xl grid grid-cols-2 p-3 gap-2  
              [&>*:nth-child(1)]:rounded-tl-[50px] [&>*:nth-child(2)]:rounded-tr-[50px]
              
              `}
            >
              {products.map((product) => {
                if (!product.show) return null;

                return (
                  <li
                    class={`bg-[#f2f2f293] p-5 relative min-h-72 h-min rounded-3xl`}
                  >
                    <div class="flex gap-4">
                      {product.registered && (
                        <>
                          <img
                            class="w-52 h-44  rounded-3xl rounded-tl-[50px] p-2 object-contain mx-auto"
                            src={product.photo?.[0] || ""}
                            alt=""
                          />
                          <div class="flex-1">
                            <h3 class="text-2xl font-bold">Características</h3>
                            <ul>
                              {product.info.specs
                                ?.split("\n")
                                .slice(0, 7)
                                .map((spec: unknown) => {
                                  return <li class="text-sm">{spec}</li>;
                                })}
                            </ul>
                          </div>
                        </>
                      )}
                    </div>

                    <div class="flex  mt-4 px-2 gap-3">
                      <div>
                        <h3 class="text-2xl font-bold bg-interbrasGreen-500 text-white px-3 py-1 rounded-tr-xl rounded-bl-xl h-min text-nowrap">
                          U$ {product.price}
                        </h3>
                        {/br|py|paraguai|paraguay|brasil|brazil/i.test(
                          product.name
                        ) && (
                          <div class="bg-interbrasGreen-100  text-interbrasGreen-500 py-[2px] rounded-tr-xl rounded-bl-xl text-2xl flex-1 w-full text-center mt-1 font-bold">
                            <p>
                              {/br|brasil|brazil/i.test(product.name)
                                ? "127V"
                                : /py|paraguay|paraguai/i.test(product.name)
                                  ? "220V"
                                  : ""}
                            </p>
                          </div>
                        )}
                      </div>

                      <div class=" border-l border-2 border-black/5" />

                      <div class=" flex flex-col justify-center">
                        <h3 class="text-2xl font-bold line-clamp-2">
                          {product.name}
                        </h3>
                        {product.info.included && (
                          <h4 class=" leading-5">
                            <strong>Incluye:</strong>
                            {product.info.included}
                          </h4>
                        )}
                      </div>
                    </div>
                  </li>
                );
              })}
            </ul>
          </section>
        );
      })
    }
  </div>
</div>

<div
  id="loader"
  class="fixed inset-0 bg-black/80 flex justify-center gap-4 items-center z-50 hidden"
>
  <div
    class="size-10 border-4 border-white border-t-transparent rounded-full animate-spin"
  >
  </div>
  <div class="">
    <p class="text-3xl font-bold text-white">Generando PDF...</p>
    <div
      class="flex text-2xl text-white font-bold bg-interbrasGreen-500 w-min px-3 py-1 rounded-xl mt-2"
    >
      Pagina
      <span class="ml-2" id="totalPages"> 0 </span>
      /
      <span id="currentPage"> 0 </span>
    </div>
  </div>
</div>

<script
  src="https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.js"
></script>

<script
  src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"
  integrity="sha512-z8IYLHO8bTgFqj+yrPyIJnzBDf7DDhWwiEsk4sY+Oe6J2M+WQequeGS7qioI5vT6rXgVRb4K1UVQC5ER7MKzKQ=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"></script>

<script type="text/javascript">
  document
    .getElementById("downloadCatalog")
    .addEventListener("click", convertir);

  async function convertir() {
    const catalog = document.getElementById("catalog");
    catalog.classList.remove("hidden");

    const loader = document.getElementById("loader");
    loader.classList.remove("hidden");

    const currentPage = document.getElementById("currentPage");
    const totalPages = document.getElementById("totalPages");

    const catalogSections = document.querySelectorAll("#catalogSection");
    totalPages.textContent = catalogSections.length;

    const { PDFDocument } = PDFLib;
    const pdfDoc = await PDFDocument.create();

    for (const section of catalogSections) {
      const node = section;
      node.classList.remove("rounded-[50px]");
      const dataUrl = await htmlToImage.toPng(node, { pixelRatio: 2 });
      node.classList.add("rounded-[50px]");

      const img = new Image();
      img.src = dataUrl;

      await new Promise((resolve) => {
        img.onload = async function () {
          const page = pdfDoc.addPage([img.width, img.height]);
          const pngImageBytes = await fetch(dataUrl).then((res) =>
            res.arrayBuffer()
          );
          const pngImage = await pdfDoc.embedPng(pngImageBytes);
          page.drawImage(pngImage, {
            x: 0,
            y: 0,
            width: img.width,
            height: img.height,
          });
          currentPage.textContent = pdfDoc.getPageCount();
          resolve(); // Esto asegura que el bucle espere a que `onload` termine
        };
      });
    }

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "catalogo.pdf";
    link.click();

    loader.classList.add("hidden");
  }
</script>

<style>
  #fade {
    opacity: 0;
    animation: fadeIn 1s forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
      transform: translate(0);
    }
  }
</style>
