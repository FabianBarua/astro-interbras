---
import { getI18NProducts, getValueFromKey } from "@/i18n";
import { cn, data } from "@/shared/utils";
import rawText from "@root/public/lista.txt?raw";
import { InteractiveGridPattern } from "../react/InteractiveGridPattern";

const { currentLocale } = Astro;
const i18n = getI18NProducts({ currentLocale });

const t = (key: string) => getValueFromKey(key, i18n);

const lista = rawText.split("\n");
const parsedLista = lista.map((item) => {
  item = item.replace("\r", "").trim();
  const code = item.slice(0, 6);
  item = item.slice(6).trim();
  const [description, price] = item.split("U$");
  const cleanedDescription = description
    .split("")
    .map((char, index, arr) =>
      char === "." && (arr[index + 1] === "." || arr[index - 1] === ".") ? "" : char
    )
    .join("")
    .trim();
  return {
    code,
    name: cleanedDescription,
    price: parseFloat(price),
  };
});

const withData = parsedLista.flatMap((item) => {
  // Encontramos todos los productos que tienen un 'child' con el listId correspondiente
  const relevantProducts = data.products
    .filter((product) => 
      product.children.some((child) => child.listId?.includes(item.code))
    );

  if (relevantProducts.length === 0) {
    return [{ ...item, dataItem: null }] as any[];
  }

  return relevantProducts.flatMap((dataItem) => {
    // Encontramos todos los children que coincidan con el listId
    const relevantChildren = dataItem.children.filter((child) => child.listId?.includes(item.code));
    
    return relevantChildren.map((relevantChild) => ({
      code: item.code,
      name: item.name,
      category: t(dataItem.name),
      categoryDescription: t(dataItem.description),
      categoryShortDescription: t(dataItem.shortDescription),
      originalName: t(relevantChild.name),
      price: item.price,
      info: {
        review: t(relevantChild.info.review),
        included: relevantChild.info.included ? t(relevantChild.info.included) : null,
        specs: t(relevantChild.info.specs),
      },
      variants: relevantChild.variants
        .filter((variant) => {
          if (!variant.stockAvailable) return false;
          if (typeof variant.stockAvailable === "boolean") return variant.stockAvailable;
          if (Array.isArray(variant.stockAvailable)) {
            return variant.stockAvailable.some((itemCode) => itemCode === item.code);
          }
        })
        .map((variantItem) => {
          return {
            ...variantItem,
            color: t(variantItem.color),
          };
        }),
    }));
  });
});



const groupedByCategory: Root = withData.reduce(
  (acc: { [key: string]: { categoryName: string; categoryDescription: string; categoryShortDescription: string; products: any[] }; }, item) => {
    if (item.category) {
      if (!acc[item.category]) {
        acc[item.category] = {
          categoryName: item.category,
          categoryDescription: item.categoryDescription,
          categoryShortDescription: item.categoryShortDescription,
          products: [],
        };
      }
      const { category, categoryDescription, categoryShortDescription, ...restItem } = item;
      acc[item.category].products.push(restItem);
    }
    return acc;
  },
  {}
);

export interface Root {
  [key: string]: Category;
}

export interface Category {
  categoryName: string;
  categoryDescription: string;
  categoryShortDescription: string;
  products: Product[];
}

export interface Product {
  code: string;
  name: string;
  originalName: string;
  price: number;
  info: Info;
  variants: Variant[];
}

export interface Info {
  review: string;
  included: any;
  specs: string;
}

export interface Variant {
  stockAvailable: boolean;
  id: string;
  name: string;
  color: string;
  photos: string[];
}

---


<div class=" flex">
  <InteractiveGridPattern
        className={cn(
          "[mask-image:radial-gradient(400px_circle_at_center,white,transparent)]",
        )}
        width={20}
        height={20}
        squares={[80, 80]}
        squaresClassName="hover:fill-interbrasGreen-500"
    />
    
  <div class=" flex-1 justify-center items-end pr-20 flex-col hidden lg:flex">

  <img id="fade" src="/1.png" alt="recopilacion de productos" class=" h-[500px] object-contain -rotate-12 scale-90" />

  </div>
  <div class=" flex justify-center items-center flex-col  h-[500px] my-9 gap-5 pointer-events-none relative z-20 mx-auto">

    <div class=" flex flex-col items-center gap-4 mx-auto">
      <h1 class=" text-5xl font-bold text-center">
        Catalogo de Productos
      </h1>
  
      <h2 class=" text-xl text-center">
        Encuentra los mejores productos para tu hogar
      </h2>
  
    </div>
  
    <button class=" bg-interbrasGreen-500 hover:bg-interbrasGreen-600  text-white px-5 py-2 rounded-xl text-xl flex gap-3 pointer-events-auto " id="downloadCatalog">
      Descargar catalogo
      <svg class=" w-auto h-6 my-auto fill-white" clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 267 267" xmlns="http://www.w3.org/2000/svg" id="fi_12262500"><g transform="matrix(4.167 0 0 4.167 -666.667 0)"><path d="m213 53h-42v-8c0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1v10.492c0 3.042 2.466 5.508 5.508 5.508h46.984c3.042 0 5.508-2.466 5.508-5.508 0-4.418 0-10.492 0-10.492 0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1zm-28-27h-13c-.4 0-.762.238-.919.606-.158.368-.081.794.195 1.084l20 21c.189.198.45.31.724.31s.535-.112.724-.31l20-21c.276-.29.353-.716.195-1.084-.157-.368-.519-.606-.919-.606h-13v-22c0-.552-.448-1-1-1h-12c-.552 0-1 .448-1 1z"></path></g></svg>
    </button>
  </div>

  <div class="  flex-1 justify-center items-start pr-20 flex-col hidden lg:flex">
    <img id="fade" src="/2.png" alt="recopilacion de productos" class=" h-[500px] object-contain rotate-12 scale-90" />
  </div>
</div>

<div id="catalogScroll" class=" mx-auto overflow-auto w-screen ">
  <div id="catalog"  class=" flex flex-col gap-8 w-[1360px] mx-auto ">

    {Object.keys(groupedByCategory).map((category) => {
      const { categoryName, products, categoryDescription } = groupedByCategory[category];
      return (
        <section id="catalogSection" class=" flex bg-interbrasGreen-500 text-white rounded-[50px] ">
          <div class="mx-8 my-16 flex flex-col">
            <h2 class="text-4xl font-bold">{categoryName}</h2>
            <h2 class="text-xl mt-2 max-w-80 leading-6">{categoryDescription}</h2>
            <h3 class="text-base max-w-80 mt-3 leading-5 text-white/70">
              {products[0].info.review}
            </h3>

            <div class=" w-full relative mt-10 bg-interbrasGreen-600 rounded-xl  py-10">
              <img class=" max-w-72 w-full rounded-3xl object-contain relative mx-auto z-10" src={products[0].variants[0]?.photos[0]} alt="" />
              <div class=" absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2  size-56 rounded-full  bg-interbrasGreen-300 "></div>
              <h3 class=" max-w-44 text-center mx-auto font-bold text-xl mt-3">
                {products[0].originalName}
              </h3>
            </div>
          </div>
          <ul class={
              `
              flex-1 bg-white text-black m-4 rounded-t-[50px] rounded-b-3xl grid grid-cols-2 p-3 gap-2  
              [&>*:nth-child(1)]:rounded-tl-[50px] [&>*:nth-child(2)]:rounded-tr-[50px]
              
              `
          }>
            {products.map((product) => {
              return (
                <li class={`bg-[#f2f2f293] p-5 relative min-h-72 h-min rounded-3xl`}>
                  <div class="flex gap-4">
                    <img class="w-52 h-44  rounded-3xl rounded-tl-[50px] p-2 object-contain mx-auto" src={product.variants[0]?.photos[0]} alt="" />
                    <div class="flex-1">
                      <h3 class="text-2xl font-bold">Caracter√≠sticas</h3>
                      <ul>
                        {product.info.specs.split("\n").slice(0, 7).map((spec) => {
                          return <li class="text-sm">{spec}</li>;
                        })}
                      </ul>
                    </div>
                  </div>
  
                  <div class="flex  mt-4 px-2 gap-3">
                    <div>
                      <h3 class="text-2xl font-bold bg-interbrasGreen-500 text-white px-3 py-1 rounded-tr-xl rounded-bl-xl h-min text-nowrap">U$ {product.price}</h3>
                      {
                      /br|py|paraguai|paraguay|brasil|brazil/i.test(product.name) && (
                        <div class="bg-interbrasGreen-100  text-interbrasGreen-500 py-[2px] rounded-tr-xl rounded-bl-xl text-2xl flex-1 w-full text-center mt-1 font-bold">
                          <p>
                            {
                              /br|brasil|brazil/i.test(product.name)
                              ? '127V' 
                              : 
                              /py|paraguay|paraguai/i.test(product.name)
                              ? '220V'
                              : ''}
                          </p>
                        </div>
                      )
                    }
  
                    </div>
  
                    <div class=" border-l border-2 border-black/5"></div>
  
                    <div class=" flex flex-col justify-center">
                      <h3 class="text-2xl font-bold line-clamp-2">{product.name}</h3>
                      {
                        product.info.included && (
                        <h4 class=" leading-5">
                        <strong>
                          Incluye:
                        </strong>
                        {product.info.included}
                      </h4>
                        )
                      }
  
                    </div>
  
                  </div>
                </li>
              );
            })}
          </ul>
        </section>
      );
    })}
  </div>
</div>

<div id="loader" class=" fixed inset-0 bg-black/80 flex justify-center gap-4 items-center z-50 hidden">
  <div class="size-10 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
  <div class=" ">
    <p class=" text-3xl font-bold text-white ">
      Generando PDF...
    </p>
    <div class=" flex text-2xl text-white font-bold bg-interbrasGreen-500 w-min px-3 py-1 rounded-xl mt-2">
      Pagina
      <span class=" ml-2" id="totalPages" >
        0
      </span>
      /
      <span id="currentPage">
        0
      </span>
    </div>
  </div>


</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js" integrity="sha512-z8IYLHO8bTgFqj+yrPyIJnzBDf7DDhWwiEsk4sY+Oe6J2M+WQequeGS7qioI5vT6rXgVRb4K1UVQC5ER7MKzKQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<script type="text/javascript">

  document.getElementById('downloadCatalog').addEventListener('click', convertir);

  async function convertir() {
  const catalog = document.getElementById('catalog');
  catalog.classList.remove('hidden');

  const loader = document.getElementById('loader');
  loader.classList.remove('hidden');

  const currentPage = document.getElementById('currentPage');
  const totalPages = document.getElementById('totalPages');

  const catalogSections = document.querySelectorAll('#catalogSection');
  totalPages.textContent = catalogSections.length;
  
  const { PDFDocument } = PDFLib;
  const pdfDoc = await PDFDocument.create();

  for (const section of catalogSections) {
    const node = section;
    node.classList.remove('rounded-[50px]');
    const dataUrl = await htmlToImage.toPng(node, { pixelRatio: 2 });
    node.classList.add('rounded-[50px]');
    
    const img = new Image();
    img.src = dataUrl;

    await new Promise((resolve) => {
      img.onload = async function () {
        const page = pdfDoc.addPage([img.width, img.height]);
        const pngImageBytes = await fetch(dataUrl).then((res) => res.arrayBuffer());
        const pngImage = await pdfDoc.embedPng(pngImageBytes);
        page.drawImage(pngImage, {
          x: 0,
          y: 0,
          width: img.width,
          height: img.height,
        });
        currentPage.textContent = pdfDoc.getPageCount();
        resolve(); // Esto asegura que el bucle espere a que `onload` termine
      };
    });
    

  }

  const pdfBytes = await pdfDoc.save();
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'catalogo.pdf';
  link.click();

  loader.classList.add('hidden');

}

</script>


<style>
  #fade {
    opacity: 0;
    animation: fadeIn 1s forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
      transform: translate(0);
    }
  }

</style>